- Stream does not store elements. It simply conveys elements from a source
through a pipeline of computational operations.

- Stream is functional in nature.

- Operations performed on a stream does not modify it's source. For example,
filtering a Stream obtained from a collection produces a new Stream without
the filtered elements, rather than removing elements from the source
collection.

- Stream is lazy and evaluates code only when required.

- The elements of a stream are only visited once during the life of a stream. Like
an Iterator, a new stream must be generated to revisit the same elements of the
source.

- You can use stream to filter, collect, print and etc.

- Stream defines many operations, which can be grouped in two categories

     1) Intermediate operations
     2) Terminal Operations

- Stream operations that can be connected are called intermediate operations.
They can be connected together because their return type is a Stream.

- Operations that close a stream pipeline are called terminal operations.

- Intermediate operations are “lazy”